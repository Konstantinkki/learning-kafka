1. install kafka for linux or windows WSL2 :
	update file ~/.profile add : export PATH="$PATH:/home/kos/kafka_2.13-3.4.0/bin"
	update file ~/.bashrc  add to the end :  . ~/.profile 

	download from https://kafka.apache.org/downloads latest Binary downloads: to ~ dir
	untar to  kafka_2.12-3.4.0
	create folder data in the  kafka_2.12-3.4.0
	create folders data/zookeeper and data/kafka
	update file config/zookeeper.properties set dataDir=/home/kos/kafka_2.13-3.4.0/data/zookeeper
	update file config/server.properties set  log.dirs=/home/kos/kafka_2.13-3.4.0/data/kafka

2. run zookeeper : cd ~/kafka_2.12-3.4.0
		   zookeeper-server-start.sh config/zookeeper.properties
3. run kafka : kafka-server-start.sh config/server.properties 


//------------create, delete, describe topic ------------------ 

kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --create --partitions 3 --replication-factor 1  (create topic)
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list (list of topics)
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --describe (topics description partitions) 

kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic second_topic --create --partitions 6 --replication-factor 1  (create one more topic) 
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic second_topic --delete


//-----------Send message into topic-----------

kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic first_topic
kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic first_topic --producer-property acks=all
>enter messages


//----------consume messages -------------------
kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic
kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --from-beginning


//---------consumers in groups (assign topic to group) --------------

kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic first_topic --group my-first-application  (messages will be balanced between all live consumers in group 'my-first-application' )


//---------consumer groups -----------------
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group my-second-group
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group --my-first-group --reset-offsets --to-earliest --execute  --topic my_first_topic
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group --my-first-group --reset-offsets --shift-by -2 --execute  --topic my_first_topic

//------------change topic configuration-----------
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic configured-topic --create --partitions 3 --replication-factor 1
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic configured-topic --describe    (result - no configs)
kafka-configs.sh --bootstrap-server 127.0.0.1:9092 --entity-type topics --entity-name configured-topic --describe ( result - no configs)
kafka-configs.sh --bootstrap-server 127.0.0.1:9092 --entity-type topics --entity-name configured-topic --add-config min.insync.replicas=2 --alter
kafka-configs.sh --bootstrap-server 127.0.0.1:9092 --entity-type topics --entity-name configured-topic --describe ( result - Configs for topic 'configured-topic' are min.insync.replicas=2)
kafka-configs.sh --bootstrap-server 127.0.0.1:9092 --topic configured-topic --describe    (result - Configs:min.insync.replicas=2)
kafka-configs.sh --bootstrap-server 127.0.0.1:9092 --entity-type topics --entity-name configured-topic --delete-config min.insync.replicas --alter (delete config)

//-------------cleanup_policy------------
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --describe --topic __consumer_offsets   (will see cleanup.policy=compact/other)

//-------------- add config min.insync.replicas=2-------------
kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic highly-durable --create --partitions 3 --replication-factor 1 (creating topic)
kafka-configs.sh --bootstrap-server 127.0.0.1:9092 --entity-type topics --entity-name highly-durable --alter --add-config min.insync.replicas=2 (add config option)

OR update file config/server.properties and set propertie:
min.insync.replicas=2

//-------------- configure few servers cluster----------
1. copy server0.properties to server1.properties server2.properties
2. update server1.properties
   set 
	broker.id=1
	log.dirs=kafka/data/kafka1
	listeners=PLAINTEXT://:9093
3. update server2.properties                                                                                                                                     
   set                                                                                                                       
        broker.id=2                                         
        log.dirs=kafka/data/kafka2                              
        listeners=PLAINTEXT://:9094
4. create folders
   mkdir data/kafka1
   mkdir data/kafka2	

5.run server with specified config :
   kafka-server-start.sh config/server1.properties
    
//---------send message to all 3 servers
kafka-topics.sh --bootstrap-server localhost:9092 --topic many-reps --create --partitions 6 --replication-factor 3 (create topic)
kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic many-reps    (send message to all brokers in cluster )  
kafka-console-producer.sh --broker-list 127.0.0.1:9092, 127.0.0.1:9093, 127.0.0.1:9094 --topic many-reps    (send message to next if prev is down )
kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9093 --topic many-reps --from-beginning (read messages from begin)


//-------------kafka in docker------------
'kafka stack docker compose'

//---------------kafka on AWS-------------
1 install java
2 download and wextract kafka
3 export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M"
4 run zookeeper - bin/zookeeper-server-start.sh -daemon config/zookeeper.properties
5 run kafka -  bin/kafka-server-start.sh config/server.properties
6 update config/server.properties  -> advertised.listeners=PLAINTEXT://<aws-public-ip>:9092
7 connect to topic - kafka-console-producer- --broker-list <aws-public-ip>:9092 --topic <topic-name>
8 consume messages - kafka-console-consumer --bootstrap-server <aws-public-ip>:9092 --topic <topic-name> --from-beginning



